plugins {
    id 'com.google.protobuf' version '0.8.8' apply false
    id 'com.palantir.docker' version '0.25.0' apply false
    id "de.undercouch.download" version "4.0.4" apply false
    id "com.jfrog.artifactory" version '4.15.1'
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
}

apply plugin: 'kotlin'
apply plugin: 'java-library'
apply plugin: 'application'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'com.palantir.docker'

ext {
    sharedDir           = file("${project.rootDir}/shared")
}

group = 'com.exactpro.th2'
version = release_version

compileKotlin {
    kotlinOptions.jvmTarget = "11"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "11"
}

sourceCompatibility = 11
targetCompatibility = 11

repositories {
    maven {
        name 'MavenLocal'
        url sharedDir
    }
    mavenCentral()
    maven {
        name 'Artifactory snapshot'
        url 'http://artifactory5.exp.exactpro.com/artifactory/libs-snapshot'
    }
    maven {
        name 'Artifactory release'
        url 'http://artifactory5.exp.exactpro.com/artifactory/libs-release'
    }
    mavenLocal()

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
    }
}

jar {
    manifest {
        attributes(
                'Created-By':               "${System.getProperty('java.version')} (${System.getProperty('java.vendor')})",
                'Specification-Title':      '',
                'Specification-Vendor':     'Exactpro Systems LLC',
                'Implementation-Title':     project.archivesBaseName,
                'Implementation-Vendor':    'Exactpro Systems LLC',
                'Implementation-Vendor-Id': 'com.exactpro',
                'Implementation-Version':   project.version
        )
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {
        maven {
            name = 'localRepo'
            url = sharedDir
        }
    }
}

artifactory {
    publish {
        contextUrl = "${artifactory_url}"
        repository {
            repoKey = "${artifactory_deploy_repo_key}" // The Artifactory repository key to publish to
            username = "${artifactory_user}" // The publisher user name
            password = "${artifactory_password}" // The publisher password
        }
        defaults {
            // Reference to Gradle publications defined in the build script.
            // This is how we tell the Artifactory Plugin which artifacts should be
            // published to Artifactory.
            publications('mavenJava')
            publishArtifacts = true
            publishBuildInfo = true
            // Properties to be attached to the published artifacts.
            publishPom = true
        }
    }
}

dependencies {
    api platform('com.exactpro.th2:bom:2.1.+')
    implementation "com.exactpro.th2:common"
    implementation 'com.exactpro.th2:sailfish-utils'
    implementation "com.exactpro.th2:grpc-common"
    implementation "com.exactpro.th2:grpc-check1"
    implementation "org.slf4j:slf4j-log4j12"
    implementation "org.slf4j:slf4j-api"

    implementation "com.google.protobuf:protobuf-java-util"
    implementation "io.grpc:grpc-protobuf"
    implementation "io.grpc:grpc-stub"
    implementation "io.grpc:grpc-core"
    implementation "io.grpc:grpc-netty"

    implementation "com.exactpro.sf:sailfish-core:3.2-SNAPSHOT"

    implementation "com.rabbitmq:amqp-client:5.8.0"
    implementation "com.datastax.cassandra:cassandra-driver-core:3.6.0" //FIXME: Migrate to another library for UUID

    implementation "io.reactivex.rxjava2:rxjava:2.2.19" // https://github.com/salesforce/reactive-grpc/issues/202

    testImplementation 'org.junit.jupiter:junit-jupiter:5.6.2'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit'
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
}

test {
    useJUnitPlatform()
}

application {
    mainClassName 'com.exactpro.th2.check1.VerifyMain'
}

applicationName = 'service'

distTar {
    archiveName "${applicationName}.tar"
}

dockerPrepare {
    dependsOn distTar
}

docker {
    copySpec.from(tarTree("$buildDir/distributions/${applicationName}.tar"))
}
