plugins {
    id 'com.palantir.docker' version '0.25.0'
    id 'org.jetbrains.kotlin.jvm' version '1.5.30'
    id "io.github.gradle-nexus.publish-plugin" version "1.0.0"
    id 'signing'
    id 'java-library'
    id 'application'
    id 'maven-publish'
}

ext {
    sharedDir           = file("${project.rootDir}/shared")
    sailfishVersion     = '3.2.1752'
}

group = 'com.exactpro.th2'
version = release_version

compileKotlin {
    kotlinOptions.jvmTarget = "11"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "11"
}

sourceCompatibility = 11
targetCompatibility = 11

repositories {
    maven {
        name 'MavenLocal'
        url sharedDir
    }

    mavenCentral()
    maven {
        name 'Sonatype_snapshots'
        url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
    }
    maven {
        name 'Sonatype_releases'
        url 'https://s01.oss.sonatype.org/content/repositories/releases/'
    }
    mavenLocal()

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
}

jar {
    manifest {
        attributes(
                'Created-By':               "${System.getProperty('java.version')} (${System.getProperty('java.vendor')})",
                'Specification-Title':      '',
                'Specification-Vendor':     'Exactpro Systems LLC',
                'Implementation-Title':     project.archivesBaseName,
                'Implementation-Vendor':    'Exactpro Systems LLC',
                'Implementation-Vendor-Id': 'com.exactpro',
                'Implementation-Version':   project.version
        )
    }
}

// conditionals for publications
tasks.withType(PublishToMavenRepository) {
    onlyIf {
        (repository == publishing.repositories.nexus &&
                project.hasProperty('nexus_user') &&
                project.hasProperty('nexus_password') &&
                project.hasProperty('nexus_url')) ||
                (repository == publishing.repositories.sonatype &&
                        project.hasProperty('sonatypeUsername') &&
                        project.hasProperty('sonatypePassword')) ||
                (repository == publishing.repositories.local)
    }
}
tasks.withType(Sign) {
    onlyIf { project.hasProperty('signingKey') &&
            project.hasProperty('signingPassword')
    }
}
// disable running task 'initializeSonatypeStagingRepository' on a gitlab
tasks.whenTaskAdded {task ->
    if(task.name.equals('initializeSonatypeStagingRepository') &&
            !(project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword'))
    ) {
        task.enabled = false
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)
            pom {
                name = rootProject.name
                packaging = 'jar'
                description = rootProject.description
                url = vcs_url
                scm {
                    url = vcs_url
                }
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'developer'
                        name = 'developer'
                        email = 'developer@exactpro.com'
                    }
                }
                scm {
                    url = vcs_url
                }
            }
        }
    }
    repositories {
        maven {
            name = 'local'
            url = sharedDir
        }
        //Nexus repo to publish from gitlab
        maven {
            name = 'nexus'
            credentials {
                username = project.findProperty('nexus_user')
                password = project.findProperty('nexus_password')
            }
            url = project.findProperty('nexus_url')
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

dependencies {
    api platform('com.exactpro.th2:bom:3.0.0')
    implementation 'com.exactpro.th2:grpc-check1:3.5.1'
    implementation 'com.exactpro.th2:common:3.31.3'
    implementation 'com.exactpro.th2:sailfish-utils:3.13.0'
    implementation "org.slf4j:slf4j-log4j12"
    implementation "org.slf4j:slf4j-api"

    implementation "com.exactpro.sf:sailfish-core:${sailfishVersion}"

    implementation "io.reactivex.rxjava2:rxjava:2.2.19" // https://github.com/salesforce/reactive-grpc/issues/202

    implementation('io.prometheus:simpleclient') {
        because('metrics from messages and rules')
    }
    implementation 'org.jetbrains.kotlin:kotlin-reflect'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.6.2'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit'
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
}

test {
    useJUnitPlatform()
}

application {
    mainClassName 'com.exactpro.th2.check1.Check1Main'
}

applicationName = 'service'

distTar {
    archiveName "${applicationName}.tar"
}

dockerPrepare {
    dependsOn distTar
}

docker {
    copySpec.from(tarTree("$buildDir/distributions/${applicationName}.tar"))
}
